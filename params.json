{"name":"Celesta","tagline":"Custom selectbox with look and feel of native one","body":"Celesta\r\n=====\r\nCustom selectbox with look and feel of native one. \r\n(Just see the [demo](http://thybzi.github.io/celesta/demo/).)\r\n\r\n* Pure JavaScript library working on top of native browser selectbox\r\n* Looks like `<select>`, feels like `<select>`, and quacks like `<select>` \r\n* Fully skinnable with CSS (including dropdown)\r\n\r\n### Browser support ###\r\n\r\n* IE 10+ (or 9+ with `classList` [polyfill](polyfill/classlist.js))\r\n* Opera 11.6+\r\n* Safari 5.1.4+\r\n* Firefox 4+\r\n* Chrome 8+\r\n* (?) iOS Safari 6+\r\n* (?) Android Browser 4+ (or 2+ with `classList` and `bind` polyfills)\r\n* (?) Opera Mobile 12+\r\n* (?) IE Mobile 10+\r\n\r\n### Basic usage ###\r\n\r\n```javascript\r\nnew Celesta(document.getElementById('my_select'));\r\n```\r\nOr, a little more advanced example:\r\n```javascript\r\nvar selectbox = document.querySelector('.some-select');\r\nvar celesta = new Celesta(selectbox, {\r\n    space_key_open: false,\r\n    options_nav_cycling: true,\r\n    closed_options_pagekey_jump_by: 5\r\n});\r\n\r\ncelesta.selectOption(3);\r\n\r\ncelesta.addEventListener('open', myCallbackFunction);\r\ncelesta.open();\r\ncelesta.hoverOption(6);\r\ncelesta.close();\r\n\r\ncelesta.refresh();\r\ncelesta.destroy();\r\n```\r\n\r\nFor more advanced usage, see [Options](#options-reference), [Methods](#methods-reference) and [Events](#events-reference) reference.\r\nAlso, you can see [the demo](http://thybzi.github.io/celesta/demo/).\r\n\r\n### Features ###\r\n\r\n* Support for optgroups, disabled state, disabled options/groups\r\n* Classname inheritance for select and options\r\n* Element and dropdown fully skinnable with CSS (no hardcoded CSS properties)\r\n* Automatic dropdown reverse to fit browser window viewable area\r\n* Dropdown scrolling: \r\n    * native browser way, or\r\n    * custom scrollbar libs such as [perfect-scrollbar](http://noraesae.github.io/perfect-scrollbar/)\r\n* Mouse support:\r\n    * Focus with associated label click\r\n    * Open with click\r\n    * Highlight option with mouse hover\r\n    * Select & close with option click\r\n    * Close with outer click or outer mousewheel\r\n* Keyboard support:\r\n    * Navigatable with <kbd>Tab</kbd>\r\n    * Open with <kbd>Space</kbd> or <kbd>Enter</kbd>\r\n    * Navigate through options with arrow keys (<kbd>↑</kbd> & <kbd>↓</kbd>), <kbd>PageUp</kbd> or <kbd>PageDown</kbd>\r\n    * Find option by *keyboard typing* (quicksearch)\r\n    * Close with <kbd>Esc</kbd>, select & close with <kbd>Enter</kbd>\r\n* Interaction:\r\n    * Source `<select>` remains in DOM\r\n    * Option select interaction: Celesta ↔ native select\r\n    * Resets value on form reset\r\n    * [JavaScript API](#methods-reference) to control Celesta instance\r\n    * [Events handling](#events-reference) with `addEventListener`\r\n* Falls back to native selectbox if cannot initialize\r\n* [Plenty of options](#options-reference) to customize UX; see [the demo](http://thybzi.github.io/celesta/demo/) to play with some of them\r\n* No external library or framework dependencies\r\n* Usage mode: AMD, CommonJS or direct `<script>`\r\n* Available in `npm` and `bower`\r\n\r\n### Beta warning ###\r\n\r\nThis library is still under construction. \r\nAPI methods, option names, event callback interface, CSS classnames etc. can be changed at any time.\r\n\r\n\r\n### Todo list & known issues ###\r\n\r\n* `multiple` select support\r\n* PageUp/PageDown behavior isn't perfect, and not always matching native select behavior\r\n* jQuery plugin\r\n* Make work better with [jScrollPane](http://jscrollpane.kelvinluck.com/)\r\n* UX testing on mobile devices\r\n* (?) Put source select element inside (not after) Celesta container\r\n* (?) Fall back to native option list on mobile devices\r\n* (?) Methods call chaining\r\n* (?) Link to source elements, not indexes (benchmarking needed)\r\n* (?) Better feature detection on initialization\r\n* Skin generator\r\n\r\n### Never to be implemented ###\r\n\r\n* Significant UI/UX change compared to native selectbox (if you want something \"fancier\", try [Chosen](https://harvesthq.github.io/chosen/) or things like that)\r\n\r\n\r\n### Options reference ###\r\n\r\nOption | Accepted value | Default value | Description \r\n-------|----------------|---------------|-------------------------------------------------------------------------------\r\n**width** | *number*&nbsp;&#124;&nbsp;`null` | `null` | Explicit element width (`null` for automatic/inherited width) \r\n**height** | *number*&nbsp;&#124;&nbsp;`null` | `null` | Explicit element height (`null` for automatic/inherited width) \r\n**inherit_width** | *boolean* | `false` | Inherit source select width\r\n**inherit_height** | *boolean* | `false` | Inherit source select height\r\n**inherit_classes** | *boolean* | `true` | Inherit classnames from source select\r\n**inherit_optgroup_classes** | *boolean* | `true` | Inherit classnames from every source optgroup to correspondent generated element\r\n**inherit_option_classes** | *boolean* | `true` | Inherit classnames from every source option to correspondent generated element (and facade label, if selected)\r\n**optlist_smart_reverse** | *boolean* | `true` | Detect best dropdown direction (down/up) based on available space and scroll position\r\n**use_optgroups** | *boolean* | `true` | Find optgroups in source select and generate correspondent containers in optlist\r\n**handle_mouse** | *boolean* | `true` | Handle mouse events (click, hover etc.)\r\n**outer_mousewheel_close** | *boolean* | `true` | Close open Celesta when mouse wheel used out of its area (requires *handle_mouse* to be enabled)\r\n**handle_arrowkeys** | *boolean* | `true` | Handle pressing arrow keys (<kbd>↑</kbd>/<kbd>↓</kbd>)\r\n**handle_pagekeys** | *boolean* | `true` | Handle pressing <kbd>PageUp</kbd>/<kbd>PageDown</kbd> keys\r\n**enter_key_open** | *boolean* | `true` | Open closed Celesta with <kbd>Enter</kbd> key\r\n**space_key_open** | *boolean* | `true` | Open closed Celesta with <kbd>Space</kbd> key\r\n**enter_key_select** | *boolean* | `true` | Select hovered option with <kbd>Enter</kbd> key\r\n**escape_key_close** | *boolean* | `true` | Close open Celesta with <kbd>Esc</kbd> key\r\n**handle_keyboard_typed** | *boolean* | `true` | Enable options quicksearch with keyboard typing\r\n**typed_life** | *number* | `1000` | Storing life (milliseconds) for previously typed quicksearch characters if no other char is typed\r\n**typed_collapse_repeated** | *boolean* | `true` | When a single key press hold detected, cycle through matching options\r\n**closed_options_pagekey_jump_by** | *number* | `3` | <kbd>PageUp</kbd>/<kbd>PageDown</kbd> jump size on closed Celesta\r\n**open_options_pagekey_jump_by** | *number*&nbsp;&#124;&nbsp;`true` | `true` | <kbd>PageUp</kbd>/<kbd>PageDown</kbd> jump size on open Celesta(`true` for jump to first invisible item)\r\n**options_type_cycling** | *boolean* | `true` | Cycle options forward when quicksearch typing\r\n**options_nav_cycling** | *boolean* | `false` | Cycle options forward/backward with arrow and page keys\r\n**keyboard_hover_preselect** | *boolean* | `true` | Pre-select keyboard focused option (set to facade and select if Celesta is closed in any way)\r\n**mouse_hover_preselect** | *boolean* | `false` | Pre-select mouse hovered option (set to facade and select if Celesta is closed in any way)\r\n**mouse_hover_scroll** | *boolean* | `true` | When partially visible option is mouse hovered, scroll to make it fully visible\r\n**fix_ie_mouse_focus** | *boolean* | <abbr title=\"true for IE11-, false otherwise\">`('ActiveX' in window)`</abbr> | Generate custom HTML elements to fix IE mouseclick focus issue: http://stackoverflow.com/a/25953721\r\n**ie_tagname_prefix** | *string* | `'ie-'` | HTML element name prefix to fix IE mouseclick issue (see *fix_ie_mouse_focus*)\r\n**container_tagname** | *string* | `'span'` | HTML element name for overall Celesta container\r\n**container_classname** | *string* | `'celesta-container'` | Main classname for overall Celesta container\r\n**container_classname_open** | *string* | `'celesta-container-open'` | Additional classname for open Celesta container\r\n**container_classname_disabled** | *string* | `'celesta-container-disabled'` | Additional classname for disabled Celesta container\r\n**facade_tagname** | *string* | `'span'` | HTML element name for facade (an element that displays currently selected option)\r\n**facade_classname** | *string* | `'celesta-facade'` | Celesta facade classname\r\n**facadelabel_pseudo** | *boolean* | `false` | Don't generate separate element for facade label (use `::before`, and if so, facade label cannot inherit selected option classnames)\r\n**facade_attrname_label** | *string* | `'data-label'` | Attribute name to store currently selected option title (if `::before` is used)\r\n**facadelabel_tagname** | *string* | `'span'` | HTML element name for facade label (if real element is used)\r\n**facadelabel_classname** | *string* | `'celesta-facadelabel'` | Main classname for facade label (if real element is used)\r\n**optlist_tagname** | *string* | `'div'` | HTML element name for options list container\r\n**optlist_classname** | *string* | `'celesta-optlist'` | Main classname for options list container\r\n**optlist_classname_reversed** | *string* | `'celesta-optlist-reversed'` | Additional classname for *reversed* options list container\r\n**optgroup_tagname** | *string* | `'div'` | HTML element name for options group container (optgroup)\r\n**optgroup_classname** | *string* | `'celesta-optgroup'` | Main classname for options group container (optgroup)\r\n**optgroup_classname_disabled** | *string* | `'celesta-optgroup-disabled'` | Additional classname for *disabled* optgroup\r\n**optgrouplabel_pseudo** | *boolean* | `true` | Don't generate separate element for optgroup label (use `::before`)\r\n**optgroup_attrname_label** | *string* | `'data-label'` | Attribute name to store optgroup label (if `::before` is used)\r\n**optgrouplabel_tagname** | *string* | `'span'` | HTML element name for optgroup label (if real element is used)\r\n**optgrouplabel_classname** | *string* | `'celesta-optgrouplabel'` | Main classname for optgroup label (if real element is used)\r\n**option_tagname** | *string* | `'span'` | HTML element name for option item\r\n**option_classname** | *string* | `'celesta-option'` | Main classname for option item\r\n**option_classname_selected** | *string* | `'celesta-option-selected'` | Additional classname for currently *selected* option item\r\n**option_classname_hovered** | *string* | `'celesta-option-hovered'` | Additional classname for currently *hovered/focused* option item\r\n**option_classname_disabled** | *string* | `'celesta-option-disabled'` | Additional classname for *disabled* option item\r\n\r\n\r\n### Methods reference ###\r\n\r\nHere is some method to manipulate your Celesta instances directly (that is, without any user actions).\r\n\r\nExamples below assume you have Celesta instance created and named `c` (why not `c`?):\r\n```javascript\r\nvar c = new Celesta(document.getElementById('my_select'));\r\n```\r\n\r\nMost methods examples below will use this `c` variable to demonstrate some usage case.\r\n```javascript\r\nc.someCoolMethod();\r\n```\r\n\r\nAnd only *static methods* examples (there are few) will use `Celesta.prototype` instead.\r\n\r\n\r\n#### setConfigDefaults ####\r\nStatic method to override default options for all newly created Celesta instances.\r\nAccepts an object of options names and values, like the following.\r\n```javascript\r\nCelesta.prototype.setConfigDefaults({\r\n    space_key_open: false, \r\n    options_nav_cycling: true, \r\n    closed_options_pagekey_jump_by: 5 \r\n})\r\n```\r\n\r\n#### getConfigParam ####\r\nGet the value for config param specified.\r\n```javascript\r\nc.getConfigParam('enter_key_open'); // => true\r\nc.getConfigParam('typed_life'); // => 1000\r\n\r\nvar x = new Celesta(document.querySelector('.another-select', { typed_life: 1500 });\r\nx.getConfigParam('typed_life'); // => 1500\r\n```\r\n\r\n#### isInitialized ####\r\nReturns `true` if current instance is successfully initialized, `false` otherwise.\r\n```javascript\r\nc.isInitialized(); // => true\r\n```\r\n\r\n#### addEventListener ####\r\nAttaches a callback that will be fired on certain event.\r\nFor more information of events and callback arguments, see [Events reference](#events). \r\n```javascript\r\nc.addEventListener('open', function () { \r\n    console.log('bang!'); \r\n});\r\nc.open(); // 'bang!'\r\n\r\nc.attachEvent('change', function (new_value, old_value, new_text, old_text, new_index, old_index) { \r\n    console.log(\"Changed to option '\" + new_value + \"' which has text '\" + new_text + \"' and index '\" + new_index + \"'.\"); \r\n});\r\nc.selectOption(2); // \"Changed to option 'second' which has text 'The second option' and index '2'.\"\r\nc.selectOption(3); // \"Changed to option 'third' which has text 'The third option' and index '3'.\"\r\nc.selectOption(3); // (nothing happens, because selected option wasn't changed)\r\n```\r\n\r\n#### open ####\r\nTurns Celesta to open state (as if it was mouse-clicked).\r\n```javascript\r\nc.open(); // (now you can see it opened)\r\n```\r\n\r\n#### close ####\r\nTurns Celesta to closed state (as if <kbd>Esc</kbd> was pressed).\r\n```javascript\r\nc.close(); // (now you can see it closed)\r\n```\r\n\r\n#### toggle ####\r\nTurns Celesta to closed state (as if <kbd>Esc</kbd> was pressed).\r\n```javascript\r\nc.toggle(); // (now you can see it opened)\r\nc.toggle(); // (now you can see it closed again)\r\n```\r\n\r\n#### isOpen ####\r\nReturns `true` if Celesta is currently in open state, `false` otherwise.\r\n```javascript\r\nc.open();\r\nc.isOpen(); // => true\r\nc.close();\r\nc.isOpen(); // => false\r\nc.toggle();\r\nc.isOpen(); // => true\r\nc.toggle();\r\nc.isOpen(); // => false\r\n```\r\n\r\n#### setDisabled ####\r\nSet or unsets disabled state for Celesta instance.\r\nAccepts boolean value (`true` to disable, `false` to enable).\r\n```javascript\r\nc.setDisabled(true); // (now you can see it disabled)\r\nc.setDisabled(false); // (now you can see it enabled again)\r\n```\r\n\r\n#### disable ####\r\nA shortcut for `setDisabled(true)`.\r\n```javascript\r\nc.disable(); // (now you can see it disabled)\r\n```\r\n\r\n#### enable ####\r\nA shortcut for `setDisabled(false)`.\r\n```javascript\r\nc.enable(); // (now you can see it enabled)\r\n```\r\n\r\n#### isDisabled ####\r\nReturns `true` if Celesta is currently in open state, `false` otherwise.\r\n```javascript\r\nc.isDisabled(); // => false\r\nc.disable();\r\nc.isDisabled(); // => true\r\nc.enable();\r\nc.isDisabled(); // => false\r\n```\r\n\r\n#### selectOption ####\r\nSelects an option by index.\r\n```javascript\r\nc.selectOption(2); // (option with index 2 is now selected)\r\n```\r\n\r\n#### preselectOption ####\r\nPre-selects an option by index.\r\nThat imitates the behavior of displaying the text for keyboard-focused option in selecbox facade without selecting it.\r\nPre-selected option only becomes selected only after selectbox (or Celesta) is closed (even by pressing <kbd>Esc</kbd>).\r\nOnly works on open Celesta instance.\r\n```javascript\r\n// assuming we have closed Celesta with option values like 'first', 'second' etc., and 'first' is now selected\r\nc.getValue(); // => 'first'\r\nc.preselectOption(2); // (nothing happens, because Celesta is closed)\r\nc.getPreselectedOptionIndex(); // => undefined\r\nc.getValue(); // => 'first'\r\nc.open();\r\nc.preselectOption(2); // (option with index 2 is now pre-selected)\r\nc.getPreselectedOptionIndex(); // => 2\r\nc.getValue(); // => 'first' (pre-selected doesn't mean selected!)\r\nc.close();\r\nc.getPreselectedOptionIndex(); // => undefined (pre-selected option doesn't exist on closed Celesta)\r\nc.getValue(); // => 'second' (instead, it became really selected!)\r\n```\r\n\r\n#### hoverOption ####\r\nHovers (focuses) an option by index.\r\nAlso accepts second param `is_mouse`, default `false` (that means \"keyboard\").\r\nBy default, keyboard-focused items are also pre-selected, but mouse-hovered aren't (that depends on options `mouse_hover_preselect` and `mouse_hover_preselect`).\r\nOnly works on open Celesta instance.\r\n```javascript\r\n// assuming we have closed Celesta with option values like 'first', 'second' etc., and 'first' is now selected\r\nc.getValue(); // => 'first'\r\nc.hoverOption(2); // (nothing happens, because Celesta is closed)\r\nc.open();\r\nc.hoverOption(2); // (option with index 2 is now focused \"by keyboard\")\r\nc.getPreselectedOptionIndex(); // => 2 (by default, keyboard-focused item is also pre-selected)\r\nc.hoverOption(3, true); // (option with index 3 is now hovered \"by mouse\")\r\nc.getPreselectedOptionIndex(); // => 2 (still 2, because by default, mouse-hovered item isn't pre-selected)\r\nc.hoverOption(3, false); // (option with index 3 is now hovered \"by keyboard\"; actually, that false value isn't needed)\r\nc.getPreselectedOptionIndex(); // => 3 (finally, now it is 3)\r\n```\r\n\r\n#### jumpToOption ####\r\nActs as hoverOption on open Celesta, and as selectOption on closed one.\r\n```javascript\r\nc.open();\r\nc.jumpToOption(2); // (option with index 2 is now hovered)\r\nc.close();\r\nc.jumpToOption(4); // (option with index 4 is now selected)\r\n``` \r\n\r\n#### getSelectedOptionValue ####\r\nReturns the value of currently selected option.\r\n```javascript\r\n// assuming you have <option value=\"second\">The second option</option>\r\nc.getSelectedOptionValue(); // => 'second'\r\n```\r\n\r\n#### getValue ####\r\nAn alias for [`getSelectedOptionValue`](#getselectedoptionvalue).\r\n```javascript\r\n// assuming we have <option value=\"second\">The second option</option>\r\nc.getValue(); // => 'second'\r\n```\r\n\r\n#### getSelectedOptionText ####\r\nReturns the text of currently selected option.\r\n```javascript\r\n// assuming we have <option value=\"second\">The second option</option>\r\nc.getValue(); // => 'The second option'\r\n```\r\n\r\n#### getSelectedOptionIndex ####\r\nReturns the index of currently selected option.\r\n```javascript\r\n// assuming we have Celesta with option values like 'zero', 'first', 'second' etc., and 'zero' is now selected\r\nc.getSelectedOptionIndex(); // => 0\r\nc.getValue(); // => 'zero'\r\nc.selectOption(2);\r\nc.getSelectedOptionIndex(); // => 2\r\nc.getValue(); // => 'second'\r\n```\r\n\r\n#### getPreselectedOptionIndex ####\r\nReturns the index of currently pre-selected option (`undefined` if none).\r\n```javascript\r\n// assuming we have closed Celesta with option values like 'zero', 'first', 'second' etc., and 'zero' is now selected\r\nc.open();\r\nc.getPreselectedOptionIndex(); // => undefined (nothing was pre-selected by now)\r\nc.preselectOption(2);\r\nc.getSelectedOptionIndex(); // => 2\r\nc.close();\r\nc.getSelectedOptionIndex(); // => undefined (Celesta is closed, no pre-selected option exists)\r\n```\r\n\r\n#### getHoveredOptionIndex ####\r\nReturns the index of currently hovered (focused) option (`undefined` if none).\r\n```javascript\r\n// assuming we have closed Celesta with option values like 'zero', 'first', 'second' etc., and 'zero' is now selected\r\nc.getHoveredOptionIndex(); // => undefined (Celesta is closed, no hovered option exists)\r\nc.open();\r\nc.getHoveredOptionIndex(); // => 0 (on open, selected option is focused automatically)\r\nc.hoverOption(2);\r\nc.getHoveredOptionIndex(); // => 2\r\nc.close();\r\nc.getHoveredOptionIndex(); // => undefined (because Celesta is closed)\r\n```\r\n\r\n#### arrowUp ####\r\nAct as if ArrowUp (<kbd>↑</kbd>) key is pressed (selects/hovers *previous available* option).\r\n```javascript\r\n// assuming you have months option list with September currently selected\r\nc.getValue(); // => 'september'\r\nc.arrowUp();\r\nc.getValue(); // => 'august'\r\n```\r\n\r\n#### arrowDown ####\r\nAct as if ArrowDown (<kbd>↓</kbd>) key is pressed (selects/hovers *next available* option).\r\n```javascript\r\n// assuming you have months option list with September currently selected\r\nc.getValue(); // => 'september'\r\nc.arrowDown();\r\nc.getValue(); // => 'october'\r\n\r\n// now, assuming you have weekdays list with Wednesday currently selected, and (for some reason) Thursday disabled\r\nc.getValue(); // => 'wednesday'\r\nc.arrowDown(); // (goes down, skips disabled option, so actually goes down once more)\r\nc.getValue(); // => 'friday'\r\n```\r\n\r\n#### pageUp ####\r\nActs as if <kbd>PageUp</kbd> key is pressed (skips several options up).\r\nThe jump size differs depending on open state, and relies on values for options `closed_options_pagekey_jump_by` and `open_options_pagekey_jump_by`.\r\n```javascript\r\n// assuming that Celesta is currently closed, and jumps by 3 items by default\r\n// also assuming it contains a list of months with September currently selected\r\nc.getValue(); // => 'september'\r\nc.pageUp(); (skips 3 items up)\r\nc.getValue(); // => 'june'\r\n```\r\n\r\n#### pageDown ####\r\nActs as if <kbd>PageDown</kbd> key is pressed (skips several options down).\r\nThe jump size differs depending on open state, and relies on values for options `closed_options_pagekey_jump_by` and `open_options_pagekey_jump_by`.\r\n```javascript\r\n// assuming that Celesta is currently closed, and jumps by 3 items by default\r\n// also assuming it contains a list of months with September currently selected\r\nc.getValue(); // => 'september'\r\nc.pageDown(); (skips 3 items down)\r\nc.getValue(); // => 'december'\r\n```\r\n\r\n#### appendTyped ####\r\nAppends a character to the end quicksearch text (as if it was typed from the keyboard, to find some option).\r\n```javascript\r\n// assuming you have an option list that contains weekdays\r\nc.appendTyped('t'); // (quicksearch text is now: 't', 'Tuesday' becomes selected)\r\nc.appendTyped('h'); // (quicksearch text is now: 'th', 'Thursday' becomes selected)\r\nc.appendTyped('w'); // (quicksearch text is now: 'thw', 'Thursday' is still selected because there is no matching item)\r\n```\r\n\r\n#### resetTyped ####\r\nClears quicksearch text previously (as if <kbd>Backspace</kbd> was pressed while typing).\r\n```javascript\r\n// assuming you have an option list that contains weekdays\r\nc.appendTyped('t'); // (quicksearch text is now: 't', 'Tuesday' becomes selected)\r\nc.appendTyped('h'); // (quicksearch text is now: 'th', 'Thursday' becomes selected)\r\nc.appendTyped('w'); // (quicksearch text is now: 'thw', 'Thursday' is still selected because there is no matching item)\r\nc.clearTyped(); // (quicksearch text is now empty)\r\nc.appendTyped('w'); // (quicksearch text is now: 'w', 'Wednesday' becomes selected)\r\n```\r\n\r\n#### getSourceSelect ####\r\nReturns DOM element for source `<select>`.\r\n```javascript\r\nc.getSourceSelect(); // => HTMLSelectElement: <select id=\"my_select\">...</select>\r\n```\r\n\r\n#### getContainer ####\r\nReturns DOM element for Celesta overall container. \r\nMay be used to attach some click events etc.\r\n```javascript\r\nc.getContainer(); // => HTMLSpanElement: <span class=\"celesta-container\">...</span>\r\n```\r\n\r\n#### getFacade ####\r\nReturns DOM element for Celesta facade (a block to display currently selected option). \r\nMay be used to attach some click events etc.\r\n```javascript\r\nc.getFacade(); // => HTMLSpanElement: <span class=\"celesta-facade\">...</span>\r\n```\r\n\r\n#### getOptlist ####\r\nReturns DOM element for Celesta options list container.\r\nMay be used to attach some custom scroll library.\r\n```javascript\r\nc.getFacade(); // => HTMLSpanElement: <span class=\"celesta-facade\">...</span>\r\n```\r\n\r\n#### refresh ####\r\nRebuilds Celesta DOM structure, based on source `<select>` structure.\r\nTo be called after external change of source `<select>`.\r\n```html\r\n// assuming we have the following HTML markup:\r\n<select id=\"the_select\">\r\n    <option value=\"milk\">Milk</option>\r\n    <option value=\"honey\">Honey</option>\r\n</select>\r\n```\r\n```javascript\r\nvar source = document.getElementById('the_select');\r\nvar celesta = new Celesta(source); // (contains 'Milk' and 'Honey' items with indexes 0 and 1)\r\ncelesta.selectOption(1); // (selecting 'Honey')\r\ncelesta.getSelectedOptionIndex(); // => 1\r\n\r\n// now, adding another option (using jQuery syntax to make more readable)\r\n$(source.options[0]).insertAfter('<option value=\"toast\">Toast</option>'); // source select now has 'Milk' and 'Toast' and 'Honey'\r\n\r\n// but linked Celesta doesn't know anything about this change, so it cannot even selected third item (which has index 2)\r\ncelesta.selectOption(2); // trying to select last item\r\ncelesta.getSelectedOption(); // => 1 (nothing changed, because 2 is out of options range remembered by Celesta)\r\n\r\n// so we need to make a refresh\r\ncelesta.refresh();\r\ncelesta.selectOption(2); // trying to select last item, again\r\ncelesta.getSelectedOption(); // => 2 (finally, we got it!)\r\n```\r\n\r\n#### update ####\r\nJust an alias for `refresh`.\r\n```javascript\r\nc.update();\r\n```\r\n\r\n#### destroy ####\r\nDestroy any DOM structure and handlers created by Celesta instance.\r\nRestores source select to be visible and selectable.\r\n```javascript\r\nc.selectOption(2); // (that also affects source select)\r\nc.destroy(); (restores source select, with index 2 selected)\r\n```\r\n\r\n\r\n### Events reference ###\r\n\r\nCelesta can call your own callback when some events happen. Event handlers can be added with [`addEventListener`](#addeventlistener) method.\r\nCelesta also passes arguments to callbacks of some events. Here is the generic example:\r\n```javascript\r\nc.addEventListener('eventname', function (arg1, arg2, arg3) {\r\n    // (do stuff)\r\n});\r\n```\r\nA more specific example can be found [here](#addeventlistener).\r\n\r\nHere is the reference for event and arguments passed to callbacks.\r\n\r\nEvent | Callback arguments | Description\r\n------|--------------------|------------\r\n**focus** | *(none)* | Celesta DOM element obtains focus\r\n**blur** | *(none)* | Celesta DOM element loses focus\r\n**refresh** | *(none)* | Celesta instance is [refreshed](#refresh), based on source `<select>` \r\n**close** | *(none)* | Celesta instance is closed (by user action or [API function](#close))\r\n**open** | *(none)* | Celesta instance is opened (by user action or [API function](#open))\r\n**destroy** | *(none)* | Celesta instance is [destroyed](#destroy)\r\n**change** | *{string}*&nbsp;`new_value`, *{string&#124;undefined}*&nbsp;`old_value`, *{string}*&nbsp;`new_text`, *{string}*&nbsp;`old_text`, *{number}*&nbsp;`new_index`, *{number&#124;undefined}*&nbsp;`old_index` | Option is selected (by user action or [API function](#selectOption)); same as `optionselect`, but has another arguments order\r\n**optionselect** | *{number}*&nbsp;`new_index`, *{number&#124;undefined}*&nbsp;`old_index`, *{string}*&nbsp;`new_value`, *{string&#124;undefined}*&nbsp;`old_value`, *{string}*&nbsp;`new_text`, *{string}*&nbsp;`old_text` | Option is selected (by user action or [API function](#selectOption))\r\n**optionpreselect** | *{number}*&nbsp;`new_index`, *{number&#124;undefined}*&nbsp;`old_index`, *{string}*&nbsp;`new_value`, *{string&#124;undefined}*&nbsp;`old_value`, *{string}*&nbsp;`new_text`, *{string}*&nbsp;`old_text` | Celesta option is pre-selected (by user action or [API function](#preselectOption))\r\n**optionhover** | *{number}*&nbsp;`new_index`, *{number&#124;undefined}*&nbsp;`old_index`, *{string}*&nbsp;`new_value`, *{string&#124;undefined}*&nbsp;`old_value`, *{string}*&nbsp;`new_text`, *{string}*&nbsp;`old_text` | Celesta option is hovered/focused (by user action or [API function](#hoverOption))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}